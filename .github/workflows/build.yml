name: Build executables (x86_64, arm64) and create Draft Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (ex: v1.0.0) (default: draft-<run_number>)'
        required: false

jobs:
  build:
    name: Build per-architecture binaries (linux/amd64, linux/arm64)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare artifact dir
        run: mkdir -p artifacts

      - name: Setup QEMU (for multi-arch emulation)
        uses: docker/setup-qemu-action@v2

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build using container for ${{ matrix.platform }}
        env:
          ENTRY: main.py
          DOCKER_PLATFORM: ${{ matrix.platform }}
          ARCH_NAME: ${{ matrix.arch }}
        run: |
          set -eux
          docker run --rm --platform=${DOCKER_PLATFORM} \
            -v "${GITHUB_WORKSPACE}:/src" -w /src \
            python:3.11-slim bash -euxc "
            apt-get update -y
            apt-get install -y --no-install-recommends build-essential git gcc pkg-config libssl-dev ca-certificates
            python -m pip install --upgrade pip setuptools wheel pyinstaller
            if [ -f requirements.txt ]; then python -m pip install -r requirements.txt || true; fi

            chmod +x ./tools/build_pyinstaller.sh || true

            ./tools/build_pyinstaller.sh \"${ENTRY}\" \"policyedit_autoupd\" \"${ARCH_NAME}\"
          "

      - name: Upload build artifacts (per matrix platform)
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.platform }}
          path: artifacts/*

  create_release:
    name: Create Draft Release and upload assets (each binary separately)
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (for context)
        uses: actions/checkout@v4

      - name: Determine tag name
        id: tag
        run: |
          TAG_INPUT="${{ github.event.inputs.tag }}"
          if [ -z "$TAG_INPUT" ]; then
            TAG="draft-${GITHUB_RUN_NUMBER}"
          else
            TAG="$TAG_INPUT"
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Download all built artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloaded_artifacts

      - name: Create draft release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          release_name: ${{ steps.tag.outputs.tag }}
          draft: true
          body: |
            Automated draft release created by workflow run ${{ github.run_id }}.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload each binary file to the Draft Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          UPLOAD_URL_TPL: ${{ steps.create_release.outputs.upload_url }}
        run: |
          set -eux

          # Clean template from upload_url: remove "{?name,label}" if present
          UPLOAD_URL="${UPLOAD_URL_TPL%\{*}"
          echo "Upload base URL: $UPLOAD_URL"

          # Find all files under downloaded_artifacts and upload each
          # Use maxdepth to avoid extremely deep traversal; adjust if needed
          find downloaded_artifacts -type f -print0 | while IFS= read -r -d '' file; do
            fname=$(basename "$file")
            echo "Uploading $file as $fname ..."
            # Content-Type: try to use application/octet-stream
            curl --fail --show-error -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$file" \
              "$UPLOAD_URL?name=$(printf '%s' "$fname" | jq -s -R -r @uri)"
            echo "Uploaded $fname"
          done
        # jq is used for URL-encoding the filename; install if not present
        # (on ubuntu-latest jq is preinstalled; if not, consider installing earlier)
        shell: bash

      - name: List uploaded assets for logging
        run: |
          echo "Uploaded files (from downloaded_artifacts):"
          find downloaded_artifacts -type f -maxdepth 5 -print -exec ls -lh {} \;
